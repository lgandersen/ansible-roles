####################################################################################################
### THIS pf.conf IS MANAGED BY ANSIBLE, CHANGES WILL BE OVERWRITTEN!
####################################################################################################

####################################################################################################
################ options ###############################
set limit states 500000 # increased from default 10000
set limit frags 10000 # increased frm default 5000
set block-policy drop


####################################################################################################
################ macros ################################
if="{{ ansible_default_ipv4.device }}"
nat_if="lo1"
jail_if="lo2"

{% if pf_jail_nat_ip is defined %}jail_nat_ip="{{ pf_jail_nat_ip }}"
{% endif %}
{% if pf_jail_nat_range is defined %}jail_nat_range="{{ pf_jail_nat_range }}"
{% endif %}
main_v4_ip="{{ ansible_default_ipv4.address }}"
{% if ansible_default_ipv6 %}main_v6_ip="{{ ansible_default_ipv6.address }}"
{% endif %}


################ common address macros ###############
{{ pf_common_address_macros | default("# No common macros found") }}


################ macros specific to {{ ansible_nodename }} #######################
table <firewalls_own_ips> { {% for ip in ansible_all_ipv4_addresses %}{{ ip }} {% endfor %}{% for ip in ansible_all_ipv6_addresses %}{{ ip }} {% endfor %} }
table <not_firewalls_own_ips> { {% for ip in ansible_all_ipv4_addresses %}!{{ ip }} {% endfor %}{% for ip in ansible_all_ipv6_addresses %}!{{ ip }} {% endfor %} 0/0 0::/0 }

{{ pf_local_address_macros | default("# No local macros found") }}


####################################################################################################
############### scrubbing ##############################
scrub in on $if all fragment reassemble


####################################################################################################
############### early custom translation NAT #################
{{ pf_early_nat_rules | default("# No early custom NAT rules found") }}

############### translation NAT ########################
# regular jail NAT
nat on $if from ($nat_if) to ! ($if) -> $jail_nat_ip
# vnet jail NAT
nat on $if from $jail_nat_range to ! ($if) -> $jail_nat_ip

############### custom translation NAT #################
{{ pf_nat_rules | default("# No custom NAT rules found") }}

############### translation RDR ########################
{{ pf_rdr_rules | default("# No RDR rules found") }}


####################################################################################################
############### filtering ##############################
### block everything
block log all

### skip loopback interface(s)
pass quick on lo0 inet from 127.0.0.1 to 127.0.0.1
pass quick on lo0 inet6 from ::1 to ::1

### pass outgoing
pass out quick on $if all
pass out quick on $nat_if all
pass out quick on $jail_if all
pass out quick on lo0 all

### pass incoming traffic to jails initiated by localhost
pass in quick on lo0 from { 127.0.0.1, ::1 } to ($if)

### pass incoming icmp4
pass in quick on { $if $jail_if $nat_if } inet proto icmp from any to { ($if), ($jail_if), ($nat_if) } icmp-type { unreach, echoreq, timex }

### pass incoming icmp6
pass in quick on $if inet6 proto icmp6 from any to { ($if) ($jail_if) } icmp6-type { echoreq, neighbradv, neighbrsol, routeradv, routersol }
pass in quick on $if inet6 proto icmp6 from { fe80::/10 $if:network } to FF02:0:0:0:0:1:FF00::/104 icmp6-type neighbrsol

### pass incoming ssh to host and jails
pass in quick on { $if lo0 } proto tcp from { <allowssh> } to { ($if), ($nat_if), ($jail_if) } port 22

{% if hostvars[ansible_nodename]['ansible_lo1'] is defined %}
### pass v4 traffic from jail to itself on $nat_if
{% for v4ip in hostvars[ansible_nodename]['ansible_lo1']['ipv4'] %}pass quick on $nat_if from {{ v4ip['address'] }} to {{ v4ip['address'] }}
{% endfor %}
{% endif %}

{% if hostvars[ansible_nodename]['ansible_lo2'] is defined %}
# pass v4 traffic from jails to themselves on $jail_if
{% for v4ip in hostvars[ansible_nodename]['ansible_lo2']['ipv4'] %}pass quick on $jail_if from {{ v4ip['address'] }} to {{ v4ip['address'] }}
{% endfor %}
{% endif %}

# pass v4 traffic from jails to themselves on $if (rules go on lo0 because that is where the traffic is routed)
{% for v4ip in hostvars[ansible_nodename]['ansible_%s' | format(ansible_default_ipv4.device)]['ipv4'] %}pass quick on lo0 inet from {{ v4ip['address'] }} to {{ v4ip['address'] }}
{% endfor %}

# pass v6 traffic from jails to themselves (rules go on lo0 because that is where the traffic is routed)
# skip fe80: addresses because https://github.com/ansible/ansible/issues/16977
{% if ansible_default_ipv6 %}{% for v6ip in ansible_all_ipv6_addresses %}{% if not v6ip.startswith('fe80') %}pass quick on lo0 inet6 from {{ v6ip }} to {{ v6ip }}
{% endif %}
{% endfor %}
{% endif %}


####################################################################################################
### non-vnet jail rules
{% for jail in pf_jail_rules | default({}) %}
# {{ jail }} regular jail
{% for rule in pf_jail_rules[jail] %}
{% if rule.comment is defined %}
# {{ rule.comment }}
{% endif %}
{% if rule.action is defined %}{{ rule.action }} {% else %}pass {% endif %}
{% if rule.direction is defined %}{{ rule.direction }} {% else %}in {% endif %}
{% if rule.speed is defined %}{{ rule.speed }} {% else %}quick {% endif %}
{% if rule.interfaces is defined %}on { {{ rule.interfaces|join(" ") }} } {% else %}on { $if $jail_if $nat_if lo0 } {% endif %}
{% if rule.protocols is defined %} proto { {{ rule.protocols|join(" ") }} } {% endif %}
{% if rule.sources is defined %}from { {{ rule.sources|join(" ") }} } {% endif %}
{% if rule.destinations is defined %}to { {{ rule.destinations|join(" ") }} } {% endif %}
{% if rule.ports is defined %} port { {{ rule.ports|join(" ") }} }{% endif %}
{% if rule.state is defined %} {{ rule.state }} state{% endif %}
{% if rule.stateoptions is defined %} ({{ rule.stateoptions|join(", ") }}){% endif %}

{% endfor %}
{% endfor %}


{% if pf_vnet_jail_rules is defined %}
####################################################################################################
### common vnet jail rules
# permit icmp6 for all non-rfc1918 epair interfaces
pass quick on { {% for jail in pf_vnet_jail_rules | default([]) %}{{ jail.epair }}a {% endfor %}} inet6 proto icmp6 all icmp6-type { echoreq, echorep, neighbradv, neighbrsol, routeradv, routersol }

# permit icmp6 on the non-rfc1918 bridge
pass quick on {{ vnet_bridge }} inet6 proto icmp6 all icmp6-type { echoreq, echorep, neighbradv, neighbrsol, routeradv, routersol }

# permit icmp6 on the rfc1918 bridge
pass in quick on {{ rfc1918_vnet_bridge }} inet proto icmp from {{ rfc1918_vnet_bridge }}:network to ({{ rfc1918_vnet_bridge }}) icmp-type { unreach, echoreq, timex }
pass in on {{ rfc1918_vnet_bridge }} from {{ rfc1918_vnet_bridge }}:network no state
pass out on {{ rfc1918_vnet_bridge }} to {{ rfc1918_vnet_bridge }}:network no state

### individual vnet jail rules
{% for jail in pf_vnet_jail_rules | default([]) %}
# {{ jail.jailname }} vnet jail
pass in quick on {{ jail.epair }}a from {{ jail.iptable }} no state
pass out quick on {{ jail.epair }}a to {{ jail.iptable }} no state
{% for rule in jail.rules %}
{% if rule.block is defined %}block{% else %}pass{% endif %}{% if rule.direction is defined %} {{ rule.direction }}{% endif %}{% if not rule.slow is defined %} quick{% endif %}{% if rule.block is defined or rule.log is defined %} log{% endif %} on { {{ rule.interfaces | join(" ") }} }{% if rule.protocols is defined %} proto { {{ rule.protocols | join(" ") }} }{% endif %}{% if rule.sources is defined %} from { {{ rule.sources | join(" ") }} }{% endif %}{% if rule.destinations is defined %} to { {{ rule.destinations | join(" ") }} }{% endif %}{% if rule.ports is defined %} port { {{ rule.ports | join(" ") }} }{% endif %}{% if rule.tag is defined %} tag {{ rule.tag }}{% endif %}{% if rule.tagged is defined %} tagged {{ rule.tagged }}{% endif %} # {{ rule.comment }}
{% endfor %}

{% endfor %}
{% endif %}

####################################################################################################
### bhyve rules
{% if chyves_bridges is defined %}
{% for bridge in chyves_bridges %}
{% if 'networkv4' in chyves_bridges[bridge] %}
# permit all ipv4 on the interface {{ chyves_bridges[bridge]['interface'] }} ({{ chyves_bridges[bridge]['description'] }}), since we do the filtering on the tap interfaces
pass in quick on {{ chyves_bridges[bridge]['interface'] }} inet from any to {{ chyves_bridges[bridge]['networkv4'] }}
pass out quick on {{ chyves_bridges[bridge]['interface'] }} inet from {{ chyves_bridges[bridge]['networkv4'] }} to any
{% endif %}
{% if 'networkv6' in chyves_bridges[bridge] %}
# permit all ipv6 on the interface {{ chyves_bridges[bridge]['interface'] }} ({{ chyves_bridges[bridge]['description'] }}), since we do the filtering on the tap interfaces
pass in quick on {{ chyves_bridges[bridge]['interface'] }} inet6 from any to {{ chyves_bridges[bridge]['networkv6'] }}
pass out quick on {{ chyves_bridges[bridge]['interface'] }} inet6 from {{ chyves_bridges[bridge]['networkv6'] }} to any
{% endif %}
{% if 'extra_networks' in chyves_bridges[bridge] %}
# permit all traffic from the extra networks on the interface {{ chyves_bridges[bridge]['interface'] }} ({{ chyves_bridges[bridge]['description'] }}), since we do the filtering on the tap interfaces
{% for network in chyves_bridges[bridge]['extra_networks'] %}
pass in quick on {{ chyves_bridges[bridge]['interface'] }} from any to {{ network }}
pass out quick on {{ chyves_bridges[bridge]['interface'] }} from {{ network }} to any
{% endfor %}
{% endif %}
{% endfor %}

# permit incoming icmp v4 and v6 from the world to vms
pass out quick on tap inet6 proto icmp6 all icmp6-type {echoreq, echorep, neighbradv, neighbrsol, routeradv, routersol}
pass out quick on tap inet proto icmp all icmp-type { unreach, echoreq, timex }

{% if pf_vm_rules is defined %}
######### bhyve VM rules

{% for vm in pf_vm_rules %}
### {{ pf_vm_rules[vm]['description'] }}
# permit traffic from the vm to itself
pass quick on {{ pf_vm_rules[vm]['interface'] }} from {{ pf_vm_rules[vm]['table'] }} to {{ pf_vm_rules[vm]['table'] }}

# permit all outgoing traffic from the vm to the world
pass in quick on {{ pf_vm_rules[vm]['interface'] }} from {{ pf_vm_rules[vm]['table'] }} to any

{% for rule in pf_vm_rules[vm]['rules'] %}
# {{ rule.description }}
pass out quick on {{ pf_vm_rules[vm]['interface'] }} proto { {% for proto in rule.protocols %}{{ proto }} {% endfor %} } from { {% for client in rule.clients %}{{ client }} {% endfor %} } to {{ pf_vm_rules[vm]['table'] }} port { {% for port in rule.ports %}{{ port }} {% endfor %}}

{% endfor %}
{% endfor %}
{% endif %}
{% endif %}


####################################################################################################
### custom rules
{% if pf_custom_rules is defined %}
{{ pf_custom_rules }}
{% endif %}

